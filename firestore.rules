rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == userId || 
                   exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
                   get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.members.hasAny([request.auth.uid]));
      
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    match /familyInvites/{inviteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                   exists(/databases/$(database)/documents/families/$(request.resource.data.familyId)) &&
                   get(/databases/$(database)/documents/families/$(request.resource.data.familyId)).data.members.hasAny([request.auth.uid]);
      allow update: if request.auth != null;
    }

    match /families/{familyId} {
      allow read: if request.auth != null && 
                  resource.data.members.hasAny([request.auth.uid]);
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                   resource.data.members.hasAny([request.auth.uid]);

      match /subUsers/{subUserId} {
        allow read: if request.auth != null && 
                    exists(/databases/$(database)/documents/families/$(familyId)) &&
                    get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
        
        allow update: if request.auth != null && 
                     exists(/databases/$(database)/documents/families/$(familyId)) &&
                     get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]) &&
                     (!request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['totalPoints']) || 
                      request.resource.data.totalPoints == resource.data.totalPoints + 
                        get(/databases/$(database)/documents/chores/$(request.resource.data.lastCompletedChoreId)).data.points);
      }
    }
    
    match /chores/{choreId} {
      // Make more permissive for development
      allow read, write: if request.auth != null;
    }

    // Add rules for calendar events - make it more permissive for debugging
    match /events/{eventId} {
      allow read, write: if request.auth != null;
    }

    // Allow users to read/write their own calendar events
    match /userEvents/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      match /events/{eventId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Allow access to the daily agenda data (consolidates events, chores, meals)
    match /dailyAgenda/{agendaId} {
      allow read: if request.auth != null;
    }

    // Family calendar events collection
    match /familyEvents/{familyId} {
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/families/$(familyId)) &&
                  get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
      
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/families/$(familyId)) &&
                   get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
      
      match /events/{eventId} {
        allow read, write: if request.auth != null && 
                           exists(/databases/$(database)/documents/families/$(familyId)) &&
                           get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
      }
    }

    // Meal planner rules
    match /mealPlans/{familyId} {
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/families/$(familyId)) &&
                  get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
      
      allow write: if request.auth != null && 
                   exists(/databases/$(database)/documents/families/$(familyId)) &&
                   get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
      
      match /weeks/{weekId} {
        allow read, write: if request.auth != null && 
                           exists(/databases/$(database)/documents/families/$(familyId)) &&
                           get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
      }
    }

    // Grocery list rules
    match /groceryLists/{familyId} {
      // Allow access if the user is a member of the family
      allow read, write: if request.auth != null && 
                         exists(/databases/$(database)/documents/families/$(familyId)) &&
                         get(/databases/$(database)/documents/families/$(familyId)).data.members.hasAny([request.auth.uid]);
    }

    // Rewards store rules
    match /rewards/{rewardId} {
      // FOR DEVELOPMENT: temporarily make more permissive
      allow read, write: if request.auth != null;
      
      // Regular rules - uncomment after testing
      /*
      // Allow read access if the user is a member of the family the reward belongs to
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
                  get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.members.hasAny([request.auth.uid]);
      
      // Allow write access if the user is a member of the family
      allow create: if request.auth != null && 
                    exists(/databases/$(database)/documents/families/$(request.resource.data.familyId)) &&
                    get(/databases/$(database)/documents/families/$(request.resource.data.familyId)).data.members.hasAny([request.auth.uid]);
      
      allow update, delete: if request.auth != null && 
                           exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
                           get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.members.hasAny([request.auth.uid]);
      */
    }

    // Redemption history rules
    match /redemptions/{redemptionId} {
      // FOR DEVELOPMENT: temporarily make more permissive
      allow read, write: if request.auth != null;
      
      // Regular rules - uncomment after testing
      /*
      // Allow read if user is a member of the family
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
                  get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.members.hasAny([request.auth.uid]);
      
      // Allow create if user is a member of the family
      allow create: if request.auth != null && 
                    exists(/databases/$(database)/documents/families/$(request.resource.data.familyId)) &&
                    get(/databases/$(database)/documents/families/$(request.resource.data.familyId)).data.members.hasAny([request.auth.uid]);
      */
    }
  }
} 